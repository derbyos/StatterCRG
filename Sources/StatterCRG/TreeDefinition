// The definitions for the data tree.  The treemaker script
// will convert this to the tree data structures

root WS {
    node Device {
        var Name : String
        var Id : UUID
    }
    node Client {
        var RemoteAddress : String
        var Id : String
    }
}

root ScoreBoard {
//    node CurrentGame
//        var Game UUID
//        var InJam Bool
//        var OfficialReview Bool
//    end
    ref CurrentGame : Game
    node Clients {
        node Device {
            key id : UUID?
            var Comment : String
        }
    }
    
    enum Version {
        case Release
    }
    subscript Version : String
    var BlankStatsbookFound : Bool
}

node Period Game {
    key period : Int?
    var Team1Points : Int
    var Team2Points : Int
    var CurrentJamNumber : Int
}

node Game ScoreBoard {
    key id : UUID
    
    var Game : UUID

    !public var teamOne: Team { team(1) }
    !public var teamTwo: Team { team(2) }
    !public var periodClock: Clock { clock(.period) }
    !public var jamClock: Clock { clock(.jam) }
    !public var lineupClock: Clock { clock(.lineup) }
    !public var timeOutClock: Clock { clock(.timeOut) }
    !public var intermissionClock: Clock { clock(.intermission) }

    var CurrentPeriodNumber : Int
    var OfficialScore : Bool
    var RulesetName : String

    var InJam : Bool
    var OfficialReview : Bool
    
    var TimeoutOwner : String
    // These are commands, not state
    action StartJam
    action StopJam
    action Timeout
    action OfficialTimeout
    
    map PenaltyCode[String] : String
}

node Team Game {
    key team : Int
    var Team : Int
    var Name : String
    var FullName : String
//    var AlternateName String
    var LeagueName : String
    // this is actually a map of ID -> String
    map UniformColor [ UUID ] : String
//    var Color : String
    // A custom color for differnt roles
    !public struct Color {
    !   public init(role: Team.AlternateName? = nil, component: Component) {
    !       self.role = role
    !       self.component = component
    !   }
    !   var role: Team.AlternateName?
    !   public enum Component : String {
    !       case fg
    !       case bg
    !       case glow
    !   }
    !   var component: Component
    !   var rawValue: String {
    !       if let role { return role.rawValue + "_" + component.rawValue }
    !       else { return component.rawValue }
    !   }
    !}
    subscript Color : String
    let Score : Int
    var Timeouts : Int
    var OfficialReviews : Int
    flag RetainedOfficialReview
    var DisplayLead : Bool
    var JamScore : Int
    var NoInitial : Bool
    // path to file
    var Logo : String
    
    // these are lowercase
    enum AlternateName {
        case operator
        case scoreboard
        case whiteboard
        case overlay
    }
    subscript AlternateName : String

    flag Timeout
    flag OfficialReview
    
    list Skater : Skater

}

node Clock Game {
    enum Kind {
        case timeOut = Timeout
        case Period
        case Lineup
        case Jam
        case Intermission
    }
    key kind : Kind
    var Time : Int
    var InvertedTime : Int
    var MaximumTime : Int
    var Readonly : Bool
    var Running : Bool
    var Name : String
    var Direction : Bool
    var Number : Int
}


node Jam <Period Game> {
    key jam : Int
    var WalltimeStart : Int
}

node TeamJam Jam<P> {
    key team : Int
}


node Skater Team {
!public enum Role: String, Codable, JSONTypeable {
!   case bench = "Bench"
!   case blocker = "Blocker"
!   case pivot = "Pivot"
!   case jammer = "Jammer"
!   public init?(_ json: JSONValue) {
!      if let value = json.stringValue, let role = Role(rawValue: value) {
!              self = role
!       } else {
!           return nil
!      }
!   }
!   public var asJSON: JSONValue { .string(rawValue) }
!}
    key Id: UUID
    // skater = "", alt skater "ALT", bench "B", bench alt captain = "BA", captain = "C",  alt captain "AC"
    var Flags : String
    var Name : String
    var Pronouns : String
    var RosterNumber : String
    var Role : Role
    list Penalty : Penalty

}


node Penalty Skater {
    key Number : Int
    var Number : Int
    var JamNumber : Int
    var PeriodNumber : Int
    var Serving : Bool
    var Served : Bool
    var Code : String
    var Next : String
}

node Rule Game {
}
