// The definitions for the data tree.  The treemaker script
// will convert this to the tree data structures

root WS {
    node Device {
        var Name : String
        var Id : UUID
    }
    node Client {
        var RemoteAddress : String
        var Id : String
    }
}

root ScoreBoard {
//    node CurrentGame
//        var Game UUID
//        var InJam Bool
//        var OfficialReview Bool
//    end
    ref CurrentGame : Game
    node Clients {
        node Device {
            key id : UUID?
            var Comment : String
        }
    }
    
    enum Version {
        case Release
    }
    subscript Version : String
    var BlankStatsbookFound : Bool
    
    var ImportsInProgress : Bool
}

node Period Game {
    key period : Int?
    var Team1Points : Int
    var Team2Points : Int
    var CurrentJamNumber : Int
}

node Game ScoreBoard {
    key Id : UUID
    let Readonly : Bool
    
    // Only valid in CurrentGame
    var Game : UUID

    let Name : String
    enum PreparedState {
        case Prepared
        case Running
        case Finished
    }
    let State : PreparedState
    
    !public var teamOne: Team { team(1) }
    !public var teamTwo: Team { team(2) }
    !public var periodClock: Clock { clock(.period) }
    !public var jamClock: Clock { clock(.jam) }
    !public var lineupClock: Clock { clock(.lineup) }
    !public var timeOutClock: Clock { clock(.timeOut) }
    !public var intermissionClock: Clock { clock(.intermission) }

    let CurrentPeriodNumber : Int
    let CurrentPeriod : Int
    let CurrentTimout : UUID
    let InPeriod : Bool
    var OfficialScore : Bool

    let InJam : Bool
    let InOvertime : Bool
    let InSuddenScoring : Bool
    let InjuryContinuationUpcoming : Bool
    var TimoutOwner : UUID
    var OfficialReview : Bool
    
    let UpcomingJam : UUID
    let UpcomingJamNumber : Int
    var TimeoutOwner : String
    var NoMoreJam : Bool
    var OfficalScore : Bool
    var AbortReason : String
    var Ruleset : UUID
    let RulesetName : String
    var HeadNso : UUID
    var HeadRef : UUID
    var SuspensionsServed : String
    var ClockDuringFinalScore : Bool

    // These are commands, not state
    action StartJam
    action StopJam
    action Timeout
    action OfficialTimeout
    action StartOvertime
    action ClockUndo
    action ClockReplace
    
    // MARK: Exporting
    action Export
    let UpdateInProgress : Bool
    var StatsbookExists : Bool
    var JsonExists : Bool
    let ExportBlockedBy : String
    
    map PenaltyCode[String] : String
    map Label[UUID] : String
    map EventInfo[UUID] : String

}

node Team Game {
    key team : Int
    var Team : Int
    var Name : String
    var FullName : String
//    var AlternateName String
    var LeagueName : String
    // this is actually a map of ID -> String
    map UniformColor [ UUID ] : String
//    var Color : String
    // A custom color for differnt roles
    !public struct Color {
    !   public init(role: Team.AlternateName? = nil, component: Component) {
    !       self.role = role
    !       self.component = component
    !   }
    !   var role: Team.AlternateName?
    !   public enum Component : String {
    !       case fg
    !       case bg
    !       case glow
    !   }
    !   var component: Component
    !   var rawValue: String {
    !       if let role { return role.rawValue + "_" + component.rawValue }
    !       else { return component.rawValue }
    !   }
    !}
    subscript Color : String
    let Score : Int
    var Timeouts : Int
    var OfficialReviews : Int
    flag RetainedOfficialReview
    var DisplayLead : Bool
    var JamScore : Int
    var NoInitial : Bool
    // path to file
    var Logo : String
    
    // these are lowercase
    enum AlternateName {
        case operator
        case scoreboard
        case whiteboard
        case overlay
    }
    subscript AlternateName : String

    flag Timeout
    flag OfficialReview
    
    list Skater : Skater

}

node Clock Game {
    enum Kind {
        case timeOut = "Timeout"
        case Period
        case Lineup
        case Jam
        case Intermission
    }
    key kind : Kind
    var Time : Int
    var InvertedTime : Int
    var MaximumTime : Int
    var Readonly : Bool
    var Running : Bool
    var Name : String
    var Direction : Bool
    var Number : Int
}


node Jam <Period Game> {
    key jam : Int
    var WalltimeStart : Int
}

node TeamJam Jam<P> {
    key team : Int
}


node Skater Team {
    enum Role {
        case Bench
        case Blocker
        case Pivot
        case Jammer
    }
    key Id: UUID
    // skater = "", alt skater "ALT", bench "B", bench alt captain = "BA", captain = "C",  alt captain "AC"
    var Flags : String
    var Name : String
    var Pronouns : String
    var RosterNumber : String
    var Role : Role
    list Penalty : Penalty

}


node Penalty Skater {
    key Number : Int
    var Number : Int
    var JamNumber : Int
    var PeriodNumber : Int
    var Serving : Bool
    var Served : Bool
    var Code : String
    var Next : String
}

node Rule Game {
}

node Settings ScoreBoard {
    @compound node Setting {
        enum BoolString {
            case _true = "true"
            case _false = "false"
            ! public var isTrue : Bool { self == ._true }
        }
        node Overlay {
            node Interactive {
                enum OnOff {
                    case On
                    case Off
                }
                var BackgroundColor : String
                var Clock : OnOff
                node LowerThird {
                    var Line1 : String
                    var Line2 : String
                    enum Style {
                        case ColorDefault
                        case ColorTeam1
                        case ColorTeam2
                    }
                    var Style : Style
                    enum Panel {
                        case Empty = ""
                        case PPJBox
                        case RosterTeam1
                        case RosterTeam2
                        case PenaltyTeam1
                        case PenaltyTeam2
                        case LowerThird
                        case Upcoming
                    }
                    var Panel : Panel
                    var Score : OnOff
                    var ShowJammers : OnOff
                    var ShowLineups : OnOff
                    var ShowAllNames : OnOff
                }
            }
        }
        node ScoreBoard {
            enum AutoStart {
                case Empty = ""
                case Jam
                case Timout
            }
            var AutoStart : AutoStart
            var AutoStartBuffer : Int
            var AutoEndJam : BoolString
            var AutoEndTTO : BoolString
            enum ClockAfterTimeout {
                case Lineup
                case Timeout
            }
            var ClockAfterTimeout : ClockAfterTimeout
            node Clock {
                var Sync : BoolString
            }
            node Game {
                var DefaultNameFormat : String
            }
            node Intermission {
                var PreGame : String
                var Intermission : String
                var Unofficial : String
                var Official : String
                var OfficialWithclock : String
            }
            node Penalties {
                var ForcedServed : BoolString
                var UseLT : BoolString
            }
            enum CurrentView {
                case scoreboard
                case whiteboard
                case image
                case video
                case html
            }
            var View_CurrentView : CurrentView
            var View_CustomHTML : String
            var View_HideLogos : BoolString
            var View_Image : String
            var View_SidePadding : String
            var View_SwapTeams : BoolString
            var View_Video : String
        }
    }
}


//node Official {
//    key Id : UUID
//    let Readonly : Bool
//    var Role : String
//    var Name : String
//    var League : String
//    var Cert : String
//    var P1Team : UUID
//    var Swap : Bool
//}

//node Ref Game : Official {
//
//}
//node Nso Game : Official  {
//
//}
