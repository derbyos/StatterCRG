// The definitions for the data tree.  The treemaker script
// will convert this to the tree data structures

root WS {
    node Device {
        var Name : String
        @name(Id) var deviceId : UUID
    }
    node Client {
        var RemoteAddress : String
        @name(Id) var clientId : String
    }
}

root ScoreBoard {
//    node CurrentGame
//        var Game UUID
//        var InJam Bool
//        var OfficialReview Bool
//    end
    ref CurrentGame : Game
    node Clients {
        node Device {
            key UUID?
            var Comment : String
        }
    }
    
    enum Version {
        case Release
    }
    subscript Version : String
    var BlankStatsbookFound : Bool
    
    var ImportsInProgress : Bool
    node PenaltyCodes {
        key String
        let Readonly : Bool
        map Code[UUID] : String
        map PenaltyCode[UUID] : String
    }
    list Game[UUID] : Game
    
    node Rulesets {
        node Ruleset {
            key String?
            let Readonly : Bool
            // we can't use "parent" because that is needed
            // for built in stuff
            @name(Parent) var ParentId : String
            var Name : String
            // might be number, time, or boolean encoded as string
            map Rule[UUID] : String
        }
        node RuleDefinition {
            key String?
            let Readonly : Bool
            let Name : String
            enum RuleType {
                case Boolean
                case Integer
                case Long
                case String
                case Time
            }
            let Type : RuleType
            let DefaultValue : String
            let Description : String
            let Index : Int
            // only when Type is Boolean
            let TrueValue : String
            // only when Type is Boolean
            let FalseValue : String
        }
        ref CurrentRuleset : Ruleset
    }
}

node Period Game {
    key Int?
    key UUID
    @name(Id) let periodId : UUID
    let Number : Int
    let Previous : UUID
    let Next : UUID
    let CurrentJam : UUID
    let CurrentJamNumber : Int
    let FirstJam : UUID
    let FirstJamNumber : Int
    let SuddenScoring : Bool
    let Running : Bool
    let Duration : Int
    var WalltimeStart :Int
    var WalltimeEnd : Int
    var LocalTimeStart : String
    action Delete
    action InsertBefore
    action InsertTimeout
    @version(2023.1) let Team1PenaltyCount : Int
    @version(2023.1) let Tema2PenaltyCount : Int
    @version(2023.1) let Team1Points : Int
    @version(2023.1) let Team2Points : Int
}

node Timeout Period {
    key UUID
    @name(Id) let timeoutId : UUID
    let Readonly : Bool
    var Owner : String
    var Review : Bool
    var RetainedReview : Bool
    var Running : Bool
    var PrecedingJam : UUID
    let PrecedingJamNumber : Int
    let Duration : Int
    var PeriodClockElapsedStart : Int
    var PeriodClockElapsedEnd : Int
    var PeriodClocEnd : Int
    var WalltimeStart : Int
    var WalltimeEnd : Int
    action Delete
    @version(2023.0) action InsertAfter
}
node Game ScoreBoard {
    key UUID
    @name(Id) let gameId : UUID
    let Readonly : Bool
    
    // Only valid in CurrentGame
    var Game : UUID

    let Name : String
    enum PreparedState {
        case Prepared
        case Running
        case Finished
    }
    let State : PreparedState
    
    !public var teamOne: Team { team(1) }
    !public var teamTwo: Team { team(2) }
    !public var periodClock: Clock { clock(.period) }
    !public var jamClock: Clock { clock(.jam) }
    !public var lineupClock: Clock { clock(.lineup) }
    !public var timeOutClock: Clock { clock(.timeOut) }
    !public var intermissionClock: Clock { clock(.intermission) }

    let CurrentPeriodNumber : Int
    let CurrentPeriod : Int
    let CurrentTimout : UUID
    let InPeriod : Bool
    var OfficialScore : Bool

    let InJam : Bool
    let InOvertime : Bool
    let InSuddenScoring : Bool
    let InjuryContinuationUpcoming : Bool
    var OfficialReview : Bool
    
    let UpcomingJam : UUID
    let UpcomingJamNumber : Int
    var TimeoutOwner : UUID
    var NoMoreJam : Bool
    var OfficalScore : Bool
    var AbortReason : String
    var Ruleset : UUID
    let RulesetName : String
    var HeadNso : UUID
    var HeadRef : UUID
    var SuspensionsServed : String
    var ClockDuringFinalScore : Bool

    // These are commands, not state
    action StartJam
    action StopJam
    action Timeout
    action OfficialTimeout
    action StartOvertime
    action ClockUndo
    action ClockReplace
    
    // MARK: Exporting
    action Export
    let UpdateInProgress : Bool
    var StatsbookExists : Bool
    var JsonExists : Bool
    let ExportBlockedBy : String
    
    map Rule[String] : String
    map PenaltyCode[String] : String
    map Label[UUID] : String
    map EventInfo[UUID] : String
    list Expulsion[UUID] : Expulsion
}

node Expulsion Game {
    key UUID
    let Readonly : Bool
    var Info : String
    var ExtraInfo : String
    var Suspension : Bool
}

node Team Game {
    key Int
    key UUID
    var Team : Int
    @name(Id) let teamId : UUID
    // was writable before 5.0
    let Name : String
    var FullName : String
    let Initials : String
    let FileName : String
//    var AlternateName String
    var LeagueName : String
    // this is actually a map of ID -> String
    // or myabe it isn't!
    // map UniformColor [ UUID ] : String
    var UniformColor : String
    // A custom color for differnt roles
    !public struct Color {
    !   public init(role: Team.AlternateName? = nil, component: Component) {
    !       self.role = role
    !       self.component = component
    !   }
    !   var role: Team.AlternateName?
    !   public enum Component : String {
    !       case fg
    !       case bg
    !       case glow
    !   }
    !   var component: Component
    !   var rawValue: String {
    !       if let role { return role.rawValue + "_" + component.rawValue }
    !       else { return component.rawValue }
    !   }
    !}
    subscript Color : String
    let Score : Int
    let Timeouts : Int
    let OfficialReviews : Int
    let InTimeout : Bool
    let InOfficialReview : Bool
    @version(2023.0) let TotalPenalites : Int
    flag RetainedOfficialReview
    let DisplayLead : Bool
    let JamScore : Int
    var TripScore : Int
    let LastScore : Int
    var Lost : Bool
    var Lead : Bool
    var Calloff : Bool
    var Injury : Bool
    // writable during initial & first scoring trip if JamScore is 0
    var NoInitial : Bool
    var StarPass : Bool
    var NoPivot : Bool
    let StarPassTrip : UUID
    @version(2023.0) node ScoreAdjustment {
        key UUID
        let Readonly : Bool
        let Amount : Int
        let JamRecorded : UUID
        let PeriodNumberRecorded : Int
        let JamNumberRecorded : Int
        let RecordedDuringJam : Bool
        let LastTwoMinutes : Bool
        let Open : Bool
        var AppliedTo : Bool
        action Discard
    }
    @version(2023.0) ref ActiveScoreAdjustment : ScoreAdjustment
    @version(2023.0) var ActiveScoreAdjustmentAmount : Int
    // path to file
    var Logo : String
    
    // these are lowercase
    enum AlternateName {
        case operator
        case scoreboard
        case whiteboard
        case overlay
    }
    subscript AlternateName : String

//    flag Timeout
//    flag OfficialReview
    
    list Skater[UUID] : Skater

    action AddTrip
    action RemoveTrip
    action AdvanceFieldings
    action Timeout
    action OfficialReview
    
}

node Clock Game {
    enum Kind {
        case timeOut = "Timeout"
        case Period
        case Lineup
        case Jam
        case Intermission
    }
    key Kind
    @name(Id) let clockId : String
    var Time : Int
    let InvertedTime : Int
    var MaximumTime : Int
    var MinimumTime : Int
    let Readonly : Bool
    var Running : Bool
    var Name : String
    var Direction : Bool
    var Number : Int
    action Start
    action Stop
    @reset action ResetTime
}

node Fielding <Jam TeamJam> {
    var Annotation : String
    var BoxTripSymbols : String
    var BoxTripSymbolsAfterSP : String
    var BoxTripSymbolsBeforeSP : String
    var CurrentBoxTrip : String
    // Id is uuid + team + position
    // var Id : String
    var Next : String
    var NotFielded : Bool
    // why is this an int?
    var Number : Int
    var PenaltyBox : Bool
    var Position : String
    var Previous : String
    let Readonly : Bool
    var SitFor3 : Bool
    var Skater : UUID
}

node ScoringTrip  <Jam TeamJam> {
    var AfterSP : Bool
    var Annotation : String
    var Current : Bool
    var Duration : Int
    key UUID
    @name(Id) let tripId : UUID
    var JamClockEnd : Int
    var JamClockStart : Int
    var Next : UUID
    key Int
    var Number : Int
    var Previous : UUID
    let Readonly: Bool
    var Score: Int
}
protocol Jamlike {
    let Readonly : Bool
    let Number : Int
    let Previous : UUID
    let Next : UUID
    let PeriodNumber : Int
    let StarPass : Bool
    var Overtime : Bool
    var InjuryContinuation : Bool
    let Duration : Int
    var PeriodClockElapsedStart : Int
    var PeriodClockElapsedEnd : Int
    var PeriodClockDisplayEnd : Int
    var WalltimeStart : Int
    var WalltimeEnd : Int
    action Delete
    action InsertBefore
    action InsertTimeoutAfter
    @name(Id) let jamId : UUID
    var NoInitial : Bool
    var NoPivot : Bool
    var Lead : Bool
    var Lost : Bool
    var Injury : Bool
    var Calloff : Bool
    var StarPassTrip : UUID
    var TotalScore : Int
    var AfterSPScore : Int
    var JamScore : Int
    var LastScore : Int
    var DisplayLead: Bool
    var CurrentTrip : Int
    var OsOffset : Int
    var OsOffsetReason : String
    
    enum Position {
        case Jammer
        case Pivot
        case Blocker1
        case Blocker2
        case Blocker3
    }
    list Fielding[Position] : Fielding<Self>
    list ScoringTrips[Int] : ScoringTrip<Self>
}

node Jam <Period Game> : Jamlike {
    
    key Int
    key UUID
    @name(Id) let jamID : UUID
}

node TeamJam Jam<P> : Jamlike {
    key Int
    key UUID
    @name(Id) var teamJamID : UUID
}


node Skater Team {
    enum Role {
        case Bench
        case Blocker
        case Pivot
        case Jammer
    }
    key UUID
    @name(Id) let skaterId : UUID
    enum Flags {
        case Skater = ""
        case AltSkater = "ALT"
        case Bench = "B"
        case Captain = "C"
        case BenchAltCaptain = "BA"
        case AltCaptain = "AC"
    }
    var Flags : Flags
    var Name : String
    @version(2023.0) var Pronouns : String
    // only jammer and pivot
    @version(2023.0) var Color : String
    var RosterNumber : String
    var Role : Role
    list Penalty[Int] : Penalty

}

node BoxTrip Period {
    key UUID
    @name(Id) let boxTripId : UUID
    // id _ jam _ position
    var CurrentFielding : String
    var Duration : Int
    var EndAfterSP : Bool
    var EndBetweenJams : Bool
    var EndFielding : String
    var EndJamNumber : Int
    map Fielding[ String ] : String
    var IsCurrent : Bool
    var JamClockEnd : Int
    var JamClockStart : Int
    map Penalty[ UUID ] : String
    let ReadOnly : Bool
    var StartAfterSP : Bool
    var StartBetweenJams : Bool
    var StartFielding : String
    var StartJamNubmer : Int
    var WalltimeEnd : Int
    var WalltimeStart : Int
}

node Penalty Skater {
    key Int
    var Number : Int
    var JamNumber : Int
    var PeriodNumber : Int
    var Serving : Bool
    var Served : Bool
    var Code : String
    var Next : String
    // this is normally a UUID if it is available
    var BoxTrip : String
}

node Settings ScoreBoard {
    @compound node Setting {
        enum BoolString {
            case _true = "true"
            case _false = "false"
            ! public var isTrue : Bool { self == ._true }
        }
        node Overlay {
            node Interactive {
                enum OnOff {
                    case On
                    case Off
                }
                var BackgroundColor : String
                var Clock : OnOff
                node LowerThird {
                    var Line1 : String
                    var Line2 : String
                    enum Style {
                        case ColorDefault
                        case ColorTeam1
                        case ColorTeam2
                    }
                    var Style : Style
                    enum Panel {
                        case Empty = ""
                        case PPJBox
                        case RosterTeam1
                        case RosterTeam2
                        case PenaltyTeam1
                        case PenaltyTeam2
                        case LowerThird
                        case Upcoming
                    }
                    var Panel : Panel
                    var Score : OnOff
                    var ShowJammers : OnOff
                    var ShowLineups : OnOff
                    var ShowAllNames : OnOff
                }
            }
        }
        node ScoreBoard {
            enum AutoStart {
                case Empty = ""
                case Jam
                case Timout
            }
            var AutoStart : AutoStart
            var AutoStartBuffer : Int
            var AutoEndJam : BoolString
            var AutoEndTTO : BoolString
            enum ClockAfterTimeout {
                case Lineup
                case Timeout
            }
            var ClockAfterTimeout : ClockAfterTimeout
            node Clock {
                var Sync : BoolString
            }
            node Game {
                var DefaultNameFormat : String
            }
            node Intermission {
                var PreGame : String
                var Intermission : String
                var Unofficial : String
                var Official : String
                var OfficialWithclock : String
            }
            node Penalties {
                var ForcedServed : BoolString
                var UseLT : BoolString
            }
            enum BoxStyle {
                case empty = ""
                case flat = "box_flat"
                case bright = "box_flag_bright"
            }
            var View_BoxStyle : BoxStyle
            var Preview_BoxStyle : BoxStyle
            enum CurrentView {
                case scoreboard
                case whiteboard
                case image
                case video
                case html
            }
            var View_CurrentView : CurrentView
            var View_CustomHTML : String
            var View_HideLogos : BoolString
            var View_Image : String
            var View_SidePadding : String
            var View_SwapTeams : BoolString
            var View_Video : String
            var Preview_CurrentView : CurrentView
            var Preview_CustomHTML : String
            var Preview_HideLogos : BoolString
            var Preview_Image : String
            var Preview_SidePadding : String
            var Preview_SwapTeams : BoolString
            var Preview_Video : String
        }
    }
}


@parent(Game) node Official <Game.Nso Game.Ref> {
    key UUID
    @name(Id) let officialId : UUID
    let Readonly : Bool
    var Role : String
    var Name : String
    var League : String
    var Cert : String
    var P1Team : UUID
    var Swap : Bool
}


node PreparedTeam ScoreBoard {
    key UUID
    @name(Id) let teamId : UUID
    let Readonly : Bool
    let Name : String
    let FullName : String
    var LeagueName : String
    var TeamName : String
    map UniformColor [ UUID ] : String
    var Logo : String
    map AlternateName[Team.AlternateName] : String
    map Color[Team.AlternateName] : String
}

node PreparedSkater PreparedTeam.Skater {
    key UUID
    @name(Id) let skaterId : UUID
    let Readonly : Bool
    var Name : String
    let Number : String
    var RosterNumber : String
    var Flags : Skater.Flags
    @version(2023.0) var Pronouns : String
}
