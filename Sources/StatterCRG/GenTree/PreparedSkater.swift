// PreparedSkater.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct PreparedSkater : PathNodeId, Identifiable {
    public var parent: PreparedTeam
    public var id: UUID? { UUID.from(component: statePath.last)?.1 }
    public let statePath: StatePath
    @ImmutableLeaf public var readonly: Bool?

    @Leaf public var name: String?

    @ImmutableLeaf public var number: String?

    @Leaf public var rosterNumber: String?

    @Leaf public var flags: Skater.Flags?

    @Leaf public var pronouns: String?

    public init(parent: PreparedTeam, id: UUID) {
        self.parent = parent
        statePath = parent.adding(.id("PreparedSkater", id: id))

        _readonly = parent.leaf("Readonly").immutable
        _name = parent.leaf("Name")
        _number = parent.leaf("Number").immutable
        _rosterNumber = parent.leaf("RosterNumber")
        _flags = parent.leaf("Flags")
        _pronouns = parent.leaf("Pronouns")
        _readonly.parentPath = statePath
        _name.parentPath = statePath
        _number.parentPath = statePath
        _rosterNumber.parentPath = statePath
        _flags.parentPath = statePath
        _pronouns.parentPath = statePath
    }
    public init(parent: PreparedTeam, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _readonly = parent.leaf("Readonly").immutable
        _name = parent.leaf("Name")
        _number = parent.leaf("Number").immutable
        _rosterNumber = parent.leaf("RosterNumber")
        _flags = parent.leaf("Flags")
        _pronouns = parent.leaf("Pronouns")
        _readonly.parentPath = statePath
        _name.parentPath = statePath
        _number.parentPath = statePath
        _rosterNumber.parentPath = statePath
        _flags.parentPath = statePath
        _pronouns.parentPath = statePath
    }
}
extension PreparedTeam {
    public func skater(_ id: UUID) -> PreparedSkater { .init(parent: self, id: id) }
}
