// Settings.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Settings : PathNode {
    public var parent: ScoreBoard
    public let statePath: StatePath
    public struct Setting : PathNode {
        public var parent: Settings
        public let statePath: StatePath
        public enum BoolString: String, EnumStringAsID {
            case _true = "true"
            case _false = "false"
            public var isTrue : Bool { self == ._true }
        }
        public struct Overlay : PathNode {
            public var parent: Setting
            public let statePath: StatePath
            public struct Interactive : PathNode {
                public var parent: Overlay
                public let statePath: StatePath
                public enum OnOff: String, EnumStringAsID {
                    case on = "On"
                    case off = "Off"
                }
                @Leaf public var backgroundColor: String?

                @Leaf public var clock: OnOff?

                public struct LowerThird : PathNode {
                    public var parent: Interactive
                    public let statePath: StatePath
                    @Leaf public var line1: String?

                    @Leaf public var line2: String?

                    public enum Style: String, EnumStringAsID {
                        case colorDefault = "ColorDefault"
                        case colorTeam1 = "ColorTeam1"
                        case colorTeam2 = "ColorTeam2"
                    }
                    @Leaf public var style: Style?

                    public enum Panel: String, EnumStringAsID {
                        case empty = ""
                        case pPJBox = "PPJBox"
                        case rosterTeam1 = "RosterTeam1"
                        case rosterTeam2 = "RosterTeam2"
                        case penaltyTeam1 = "PenaltyTeam1"
                        case penaltyTeam2 = "PenaltyTeam2"
                        case lowerThird = "LowerThird"
                        case upcoming = "Upcoming"
                    }
                    @Leaf public var panel: Panel?

                    @Leaf public var score: OnOff?

                    @Leaf public var showJammers: OnOff?

                    @Leaf public var showLineups: OnOff?

                    @Leaf public var showAllNames: OnOff?

                    public init(parent: Interactive) {
                        self.parent = parent
                        statePath = parent.adding("LowerThird")
                
                        _line1 = parent.leaf("Line1")
                        _line2 = parent.leaf("Line2")
                        _style = parent.leaf("Style")
                        _panel = parent.leaf("Panel")
                        _score = parent.leaf("Score")
                        _showJammers = parent.leaf("ShowJammers")
                        _showLineups = parent.leaf("ShowLineups")
                        _showAllNames = parent.leaf("ShowAllNames")
                        _line1.parentPath = statePath
                        _line2.parentPath = statePath
                        _style.parentPath = statePath
                        _panel.parentPath = statePath
                        _score.parentPath = statePath
                        _showJammers.parentPath = statePath
                        _showLineups.parentPath = statePath
                        _showAllNames.parentPath = statePath
                    }
                    public init(parent: Interactive, statePath: StatePath) {
                        self.parent = parent
                        self.statePath = statePath
                        _line1 = parent.leaf("Line1")
                        _line2 = parent.leaf("Line2")
                        _style = parent.leaf("Style")
                        _panel = parent.leaf("Panel")
                        _score = parent.leaf("Score")
                        _showJammers = parent.leaf("ShowJammers")
                        _showLineups = parent.leaf("ShowLineups")
                        _showAllNames = parent.leaf("ShowAllNames")
                        _line1.parentPath = statePath
                        _line2.parentPath = statePath
                        _style.parentPath = statePath
                        _panel.parentPath = statePath
                        _score.parentPath = statePath
                        _showJammers.parentPath = statePath
                        _showLineups.parentPath = statePath
                        _showAllNames.parentPath = statePath
                    }
                }
                public var lowerThird: LowerThird { .init(parent: self) }
                public init(parent: Overlay) {
                    self.parent = parent
                    statePath = parent.adding("Interactive")
            
                    _backgroundColor = parent.leaf("BackgroundColor")
                    _clock = parent.leaf("Clock")
                    _backgroundColor.parentPath = statePath
                    _clock.parentPath = statePath
                }
                public init(parent: Overlay, statePath: StatePath) {
                    self.parent = parent
                    self.statePath = statePath
                    _backgroundColor = parent.leaf("BackgroundColor")
                    _clock = parent.leaf("Clock")
                    _backgroundColor.parentPath = statePath
                    _clock.parentPath = statePath
                }
            }
            public var interactive: Interactive { .init(parent: self) }
            public init(parent: Setting) {
                self.parent = parent
                statePath = parent.adding("Overlay")
        
            }
            public init(parent: Setting, statePath: StatePath) {
                self.parent = parent
                self.statePath = statePath
            }
        }
        public var overlay: Overlay { .init(parent: self) }
        public struct ScoreBoard : PathNode {
            public var parent: Setting
            public let statePath: StatePath
            public enum AutoStart: String, EnumStringAsID {
                case empty = ""
                case jam = "Jam"
                case timout = "Timout"
            }
            @Leaf public var autoStart: AutoStart?

            @Leaf public var autoStartBuffer: Int?

            @Leaf public var autoEndJam: BoolString?

            @Leaf public var autoEndTTO: BoolString?

            public enum ClockAfterTimeout: String, EnumStringAsID {
                case lineup = "Lineup"
                case timeout = "Timeout"
            }
            @Leaf public var clockAfterTimeout: ClockAfterTimeout?

            public struct Clock : PathNode {
                public var parent: ScoreBoard
                public let statePath: StatePath
                @Leaf public var sync: BoolString?

                public init(parent: ScoreBoard) {
                    self.parent = parent
                    statePath = parent.adding("Clock")
            
                    _sync = parent.leaf("Sync")
                    _sync.parentPath = statePath
                }
                public init(parent: ScoreBoard, statePath: StatePath) {
                    self.parent = parent
                    self.statePath = statePath
                    _sync = parent.leaf("Sync")
                    _sync.parentPath = statePath
                }
            }
            public var clock: Clock { .init(parent: self) }
            public struct Game : PathNode {
                public var parent: ScoreBoard
                public let statePath: StatePath
                @Leaf public var defaultNameFormat: String?

                public init(parent: ScoreBoard) {
                    self.parent = parent
                    statePath = parent.adding("Game")
            
                    _defaultNameFormat = parent.leaf("DefaultNameFormat")
                    _defaultNameFormat.parentPath = statePath
                }
                public init(parent: ScoreBoard, statePath: StatePath) {
                    self.parent = parent
                    self.statePath = statePath
                    _defaultNameFormat = parent.leaf("DefaultNameFormat")
                    _defaultNameFormat.parentPath = statePath
                }
            }
            public var game: Game { .init(parent: self) }
            public struct Intermission : PathNode {
                public var parent: ScoreBoard
                public let statePath: StatePath
                @Leaf public var preGame: String?

                @Leaf public var intermission: String?

                @Leaf public var unofficial: String?

                @Leaf public var official: String?

                @Leaf public var officialWithclock: String?

                public init(parent: ScoreBoard) {
                    self.parent = parent
                    statePath = parent.adding("Intermission")
            
                    _preGame = parent.leaf("PreGame")
                    _intermission = parent.leaf("Intermission")
                    _unofficial = parent.leaf("Unofficial")
                    _official = parent.leaf("Official")
                    _officialWithclock = parent.leaf("OfficialWithclock")
                    _preGame.parentPath = statePath
                    _intermission.parentPath = statePath
                    _unofficial.parentPath = statePath
                    _official.parentPath = statePath
                    _officialWithclock.parentPath = statePath
                }
                public init(parent: ScoreBoard, statePath: StatePath) {
                    self.parent = parent
                    self.statePath = statePath
                    _preGame = parent.leaf("PreGame")
                    _intermission = parent.leaf("Intermission")
                    _unofficial = parent.leaf("Unofficial")
                    _official = parent.leaf("Official")
                    _officialWithclock = parent.leaf("OfficialWithclock")
                    _preGame.parentPath = statePath
                    _intermission.parentPath = statePath
                    _unofficial.parentPath = statePath
                    _official.parentPath = statePath
                    _officialWithclock.parentPath = statePath
                }
            }
            public var intermission: Intermission { .init(parent: self) }
            public struct Penalties : PathNode {
                public var parent: ScoreBoard
                public let statePath: StatePath
                @Leaf public var forcedServed: BoolString?

                @Leaf public var useLT: BoolString?

                public init(parent: ScoreBoard) {
                    self.parent = parent
                    statePath = parent.adding("Penalties")
            
                    _forcedServed = parent.leaf("ForcedServed")
                    _useLT = parent.leaf("UseLT")
                    _forcedServed.parentPath = statePath
                    _useLT.parentPath = statePath
                }
                public init(parent: ScoreBoard, statePath: StatePath) {
                    self.parent = parent
                    self.statePath = statePath
                    _forcedServed = parent.leaf("ForcedServed")
                    _useLT = parent.leaf("UseLT")
                    _forcedServed.parentPath = statePath
                    _useLT.parentPath = statePath
                }
            }
            public var penalties: Penalties { .init(parent: self) }
            public enum CurrentView: String, EnumStringAsID {
                case scoreboard = "scoreboard"
                case whiteboard = "whiteboard"
                case image = "image"
                case video = "video"
                case html = "html"
            }
            @Leaf public var view_CurrentView: CurrentView?

            @Leaf public var view_CustomHTML: String?

            @Leaf public var view_HideLogos: BoolString?

            @Leaf public var view_Image: String?

            @Leaf public var view_SidePadding: String?

            @Leaf public var view_SwapTeams: BoolString?

            @Leaf public var view_Video: String?

            public init(parent: Setting) {
                self.parent = parent
                statePath = parent.adding("ScoreBoard")
        
                _autoStart = parent.leaf("AutoStart")
                _autoStartBuffer = parent.leaf("AutoStartBuffer")
                _autoEndJam = parent.leaf("AutoEndJam")
                _autoEndTTO = parent.leaf("AutoEndTTO")
                _clockAfterTimeout = parent.leaf("ClockAfterTimeout")
                _view_CurrentView = parent.leaf("View_CurrentView")
                _view_CustomHTML = parent.leaf("View_CustomHTML")
                _view_HideLogos = parent.leaf("View_HideLogos")
                _view_Image = parent.leaf("View_Image")
                _view_SidePadding = parent.leaf("View_SidePadding")
                _view_SwapTeams = parent.leaf("View_SwapTeams")
                _view_Video = parent.leaf("View_Video")
                _autoStart.parentPath = statePath
                _autoStartBuffer.parentPath = statePath
                _autoEndJam.parentPath = statePath
                _autoEndTTO.parentPath = statePath
                _clockAfterTimeout.parentPath = statePath
                _view_CurrentView.parentPath = statePath
                _view_CustomHTML.parentPath = statePath
                _view_HideLogos.parentPath = statePath
                _view_Image.parentPath = statePath
                _view_SidePadding.parentPath = statePath
                _view_SwapTeams.parentPath = statePath
                _view_Video.parentPath = statePath
            }
            public init(parent: Setting, statePath: StatePath) {
                self.parent = parent
                self.statePath = statePath
                _autoStart = parent.leaf("AutoStart")
                _autoStartBuffer = parent.leaf("AutoStartBuffer")
                _autoEndJam = parent.leaf("AutoEndJam")
                _autoEndTTO = parent.leaf("AutoEndTTO")
                _clockAfterTimeout = parent.leaf("ClockAfterTimeout")
                _view_CurrentView = parent.leaf("View_CurrentView")
                _view_CustomHTML = parent.leaf("View_CustomHTML")
                _view_HideLogos = parent.leaf("View_HideLogos")
                _view_Image = parent.leaf("View_Image")
                _view_SidePadding = parent.leaf("View_SidePadding")
                _view_SwapTeams = parent.leaf("View_SwapTeams")
                _view_Video = parent.leaf("View_Video")
                _autoStart.parentPath = statePath
                _autoStartBuffer.parentPath = statePath
                _autoEndJam.parentPath = statePath
                _autoEndTTO.parentPath = statePath
                _clockAfterTimeout.parentPath = statePath
                _view_CurrentView.parentPath = statePath
                _view_CustomHTML.parentPath = statePath
                _view_HideLogos.parentPath = statePath
                _view_Image.parentPath = statePath
                _view_SidePadding.parentPath = statePath
                _view_SwapTeams.parentPath = statePath
                _view_Video.parentPath = statePath
            }
        }
        public var scoreBoard: ScoreBoard { .init(parent: self) }
        public init(parent: Settings) {
            self.parent = parent
            statePath = parent.adding(.compound("Setting", parts: []))
    
        }
        public init(parent: Settings, statePath: StatePath) {
            self.parent = parent
            self.statePath = statePath
        }
    }
    public var setting: Setting { .init(parent: self) }
    public init(parent: ScoreBoard) {
        self.parent = parent
        statePath = parent.adding("Settings")

    }
    public init(parent: ScoreBoard, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
    }
}
extension ScoreBoard {
    public var settings: Settings { .init(parent: self) }
}
