// BoxTrip.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct BoxTrip<P:PathSpecified> : PathNodeId, Identifiable {
    public var parent: P
    public var id: StatePath { statePath }
    public let statePath: StatePath
    @ImmutableLeaf public var boxTripId: UUID?

    // id _ jam _ position

    @Leaf public var currentFielding: String?

    @Leaf public var duration: Int?

    @Leaf public var endAfterSP: Bool?

    @Leaf public var endBetweenJams: Bool?

    @Leaf public var endFielding: String?

    @Leaf public var endJamNumber: Int?

    public typealias Fielding_Map = MapValueCollection<String, String>
    public var fielding:Fielding_Map { .init(connection: connection, statePath: self.adding(.wild("Fielding"))) }

    @Leaf public var isCurrent: Bool?

    @Leaf public var jamClockEnd: JamTime?

    @Leaf public var jamClockStart: JamTime?

    public typealias Penalty_Map = MapValueCollection<String, UUID>
    public var penalty:Penalty_Map { .init(connection: connection, statePath: self.adding(.wild("Penalty"))) }

    @ImmutableLeaf public var readOnly: Bool?

    @Leaf public var startAfterSP: Bool?

    @Leaf public var startBetweenJams: Bool?

    @Leaf public var startFielding: String?

    @Leaf public var startJamNumber: Int?

    @Leaf public var walltimeEnd: WallTime?

    @Leaf public var walltimeStart: WallTime?

    public init(parent: P, _ key: UUID) {
        self.parent = parent
        statePath = parent.adding(.id("BoxTrip", id: key))

        _boxTripId = parent.leaf("Id").immutable
        _currentFielding = parent.leaf("CurrentFielding")
        _duration = parent.leaf("Duration")
        _endAfterSP = parent.leaf("EndAfterSP")
        _endBetweenJams = parent.leaf("EndBetweenJams")
        _endFielding = parent.leaf("EndFielding")
        _endJamNumber = parent.leaf("EndJamNumber")
        _isCurrent = parent.leaf("IsCurrent")
        _jamClockEnd = parent.leaf("JamClockEnd")
        _jamClockStart = parent.leaf("JamClockStart")
        _readOnly = parent.leaf("ReadOnly").immutable
        _startAfterSP = parent.leaf("StartAfterSP")
        _startBetweenJams = parent.leaf("StartBetweenJams")
        _startFielding = parent.leaf("StartFielding")
        _startJamNumber = parent.leaf("StartJamNumber")
        _walltimeEnd = parent.leaf("WalltimeEnd")
        _walltimeStart = parent.leaf("WalltimeStart")
        _boxTripId.parentPath = statePath
        _currentFielding.parentPath = statePath
        _duration.parentPath = statePath
        _endAfterSP.parentPath = statePath
        _endBetweenJams.parentPath = statePath
        _endFielding.parentPath = statePath
        _endJamNumber.parentPath = statePath
        _isCurrent.parentPath = statePath
        _jamClockEnd.parentPath = statePath
        _jamClockStart.parentPath = statePath
        _readOnly.parentPath = statePath
        _startAfterSP.parentPath = statePath
        _startBetweenJams.parentPath = statePath
        _startFielding.parentPath = statePath
        _startJamNumber.parentPath = statePath
        _walltimeEnd.parentPath = statePath
        _walltimeStart.parentPath = statePath
    }
    public init(parent: P, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _boxTripId = parent.leaf("Id").immutable
        _currentFielding = parent.leaf("CurrentFielding")
        _duration = parent.leaf("Duration")
        _endAfterSP = parent.leaf("EndAfterSP")
        _endBetweenJams = parent.leaf("EndBetweenJams")
        _endFielding = parent.leaf("EndFielding")
        _endJamNumber = parent.leaf("EndJamNumber")
        _isCurrent = parent.leaf("IsCurrent")
        _jamClockEnd = parent.leaf("JamClockEnd")
        _jamClockStart = parent.leaf("JamClockStart")
        _readOnly = parent.leaf("ReadOnly").immutable
        _startAfterSP = parent.leaf("StartAfterSP")
        _startBetweenJams = parent.leaf("StartBetweenJams")
        _startFielding = parent.leaf("StartFielding")
        _startJamNumber = parent.leaf("StartJamNumber")
        _walltimeEnd = parent.leaf("WalltimeEnd")
        _walltimeStart = parent.leaf("WalltimeStart")
        _boxTripId.parentPath = statePath
        _currentFielding.parentPath = statePath
        _duration.parentPath = statePath
        _endAfterSP.parentPath = statePath
        _endBetweenJams.parentPath = statePath
        _endFielding.parentPath = statePath
        _endJamNumber.parentPath = statePath
        _isCurrent.parentPath = statePath
        _jamClockEnd.parentPath = statePath
        _jamClockStart.parentPath = statePath
        _readOnly.parentPath = statePath
        _startAfterSP.parentPath = statePath
        _startBetweenJams.parentPath = statePath
        _startFielding.parentPath = statePath
        _startJamNumber.parentPath = statePath
        _walltimeEnd.parentPath = statePath
        _walltimeStart.parentPath = statePath
    }
}
extension Period {
    public func boxTrip(_ key: UUID) -> BoxTrip<Period> { .init(parent: self, key) }
}
extension Team {
    public func boxTrip(_ key: UUID) -> BoxTrip<Team> { .init(parent: self, key) }
}
