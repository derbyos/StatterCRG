// WS.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct WS : PathSpecified {
    public var connection: Connection
    public var statePath: StatePath { .init(components: [.plain("WS")])}

    public struct Device : PathNodeId, Identifiable {
        public var parent: WS
        public var id: StatePath { statePath }
        public let statePath: StatePath
        @Leaf public var name: String?

        @Leaf public var deviceId: UUID?

        public init(parent: WS) {
            self.parent = parent
            statePath = parent.adding("Device")
    
            _name = parent.leaf("Name")
            _deviceId = parent.leaf("Id")
            _name.parentPath = statePath
            _deviceId.parentPath = statePath
        }
        public init(parent: WS, statePath: StatePath) {
            self.parent = parent
            self.statePath = statePath
            _name = parent.leaf("Name")
            _deviceId = parent.leaf("Id")
            _name.parentPath = statePath
            _deviceId.parentPath = statePath
        }
    }
    public var device: Device { .init(parent: self) }
    public struct Client : PathNodeId, Identifiable {
        public var parent: WS
        public var id: StatePath { statePath }
        public let statePath: StatePath
        @Leaf public var remoteAddress: String?

        @Leaf public var clientId: String?

        public init(parent: WS) {
            self.parent = parent
            statePath = parent.adding("Client")
    
            _remoteAddress = parent.leaf("RemoteAddress")
            _clientId = parent.leaf("Id")
            _remoteAddress.parentPath = statePath
            _clientId.parentPath = statePath
        }
        public init(parent: WS, statePath: StatePath) {
            self.parent = parent
            self.statePath = statePath
            _remoteAddress = parent.leaf("RemoteAddress")
            _clientId = parent.leaf("Id")
            _remoteAddress.parentPath = statePath
            _clientId.parentPath = statePath
        }
    }
    public var client: Client { .init(parent: self) }
    public init(connection: Connection) {
        self.connection = connection
        let dummy = Leaf<Bool>(connection: connection, component: .wild(""), parentPath: .init(components: []))
    }
}
