// Skater.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Skater : PathNodeId, Identifiable {
    public var parent: Team
    public var id: StatePath { statePath }
    public let statePath: StatePath
    public enum Role: String, EnumStringAsID {
        case bench = "Bench"
        case blocker = "Blocker"
        case pivot = "Pivot"
        case jammer = "Jammer"
    }
    @ImmutableLeaf public var skaterId: UUID?

    public enum Flags: String, EnumStringAsID {
        case skater = ""
        case altSkater = "ALT"
        case bench = "B"
        case captain = "C"
        case benchAltCaptain = "BA"
        case altCaptain = "AC"
    }
    @Leaf public var flags: Flags?

    @Leaf public var name: String?

    @Leaf public var pronouns: String?

    // only jammer and pivot

    @Leaf public var color: String?

    @Leaf public var rosterNumber: String?

    @Leaf public var role: Role?

    public var penalties : MapNodeCollection<Self, Penalty, Int> { .init(self,"Penalty") } 

    

    public init(parent: Team, _ key: UUID) {
        self.parent = parent
        statePath = parent.adding(.id("Skater", id: key))

        _skaterId = parent.leaf("skaterId").immutable
        _flags = parent.leaf("Flags")
        _name = parent.leaf("Name")
        _pronouns = parent.leaf("Pronouns")
        _color = parent.leaf("Color")
        _rosterNumber = parent.leaf("RosterNumber")
        _role = parent.leaf("Role")
        _skaterId.parentPath = statePath
        _flags.parentPath = statePath
        _name.parentPath = statePath
        _pronouns.parentPath = statePath
        _color.parentPath = statePath
        _rosterNumber.parentPath = statePath
        _role.parentPath = statePath
    }
    public init(parent: Team, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _skaterId = parent.leaf("skaterId").immutable
        _flags = parent.leaf("Flags")
        _name = parent.leaf("Name")
        _pronouns = parent.leaf("Pronouns")
        _color = parent.leaf("Color")
        _rosterNumber = parent.leaf("RosterNumber")
        _role = parent.leaf("Role")
        _skaterId.parentPath = statePath
        _flags.parentPath = statePath
        _name.parentPath = statePath
        _pronouns.parentPath = statePath
        _color.parentPath = statePath
        _rosterNumber.parentPath = statePath
        _role.parentPath = statePath
    }
}
extension Team {
    public func skater(_ key: UUID) -> Skater { .init(parent: self, key) }
}
