// Skater.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Skater : PathNode {
    public var parent: Team
    public let statePath: StatePath
    // skater = "", alt skater "ALT", bench "B", bench alt captain = "BA", captain = "C",  alt captain "AC"

    @Leaf public var flags: String?

    @Leaf public var name: String?

    @Leaf public var pronouns: String?

    @Leaf public var rosterNumber: String?

    public init(parent: Team, id: UUID) {
        self.parent = parent
        statePath = parent.adding(.id("Skater", id: id))

        _flags = parent.leaf("Flags")
        _name = parent.leaf("Name")
        _pronouns = parent.leaf("Pronouns")
        _rosterNumber = parent.leaf("RosterNumber")
        _flags.parentPath = statePath
        _name.parentPath = statePath
        _pronouns.parentPath = statePath
        _rosterNumber.parentPath = statePath
    }
    public init(parent: Team, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _flags = parent.leaf("Flags")
        _name = parent.leaf("Name")
        _pronouns = parent.leaf("Pronouns")
        _rosterNumber = parent.leaf("RosterNumber")
        _flags.parentPath = statePath
        _name.parentPath = statePath
        _pronouns.parentPath = statePath
        _rosterNumber.parentPath = statePath
    }
}
extension Team {
    public func skater(_ id: UUID) -> Skater { .init(parent: self, id: id) }
}
    extension Skater : Identifiable {
        public var id: UUID? { statePath.last?.id }
    }
