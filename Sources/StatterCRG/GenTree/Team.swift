// Team.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Team : PathNodeId, Identifiable {
    public var parent: Game
    public var id: StatePath { statePath }
    public let statePath: StatePath
    @Leaf public var team: Int?

    @ImmutableLeaf public var teamId: UUID?

    // was writable before 5.0

    @ImmutableLeaf public var name: String?

    @Leaf public var fullName: String?

    @ImmutableLeaf public var initials: String?

    @ImmutableLeaf public var fileName: String?

    //    var AlternateName String

    @Leaf public var leagueName: String?

    // this is actually a map of ID -> String

    // or myabe it isn't!

    // map UniformColor [ UUID ] : String

    @Leaf public var uniformColor: String?

    // A custom color for differnt roles

    public struct Color {
    public init(role: Team.AlternateName? = nil, component: Component) {
    self.role = role
    self.component = component
    }
    var role: Team.AlternateName?
    public enum Component : String {
    case fg
    case bg
    case glow
    }
    var component: Component
    var rawValue: String {
    if let role { return role.rawValue + "_" + component.rawValue }
    else { return component.rawValue }
    }
    }
    public struct Color_Subscript {
        var connection: Connection
        var statePath: StatePath
        public subscript(color:Color) -> String? {
            let l = Leaf<String>(connection: connection, component: .name("Color", name: color.rawValue), parentPath: statePath)
            return l.wrappedValue
        }
    }
    public var color:Color_Subscript { .init(connection: connection, statePath: statePath) }
    @ImmutableLeaf public var score: Int?

    @ImmutableLeaf public var timeouts: Int?

    @ImmutableLeaf public var officialReviews: Int?

    @ImmutableLeaf public var inTimeout: Bool?

    @ImmutableLeaf public var inOfficialReview: Bool?

    @ImmutableLeaf public var totalPenalites: Int?

    @Leaf public var retainedOfficialReview: Bool?

    @ImmutableLeaf public var displayLead: Bool?

    @ImmutableLeaf public var jamScore: Int?

    @Leaf public var tripScore: Int?

    @ImmutableLeaf public var lastScore: Int?

    @Leaf public var lost: Bool?

    @Leaf public var lead: Bool?

    @Leaf public var calloff: Bool?

    @Leaf public var injury: Bool?

    // writable during initial & first scoring trip if JamScore is 0

    @Leaf public var noInitial: Bool?

    @Leaf public var starPass: Bool?

    @Leaf public var noPivot: Bool?

    @ImmutableLeaf public var starPassTrip: UUID?

    public struct ScoreAdjustment : PathNodeId, Identifiable {
        public var parent: Team
        public var id: StatePath { statePath }
        public let statePath: StatePath
        @ImmutableLeaf public var readonly: Bool?

        @ImmutableLeaf public var amount: Int?

        @ImmutableLeaf public var jamRecorded: UUID?

        @ImmutableLeaf public var periodNumberRecorded: Int?

        @ImmutableLeaf public var jamNumberRecorded: Int?

        @ImmutableLeaf public var recordedDuringJam: Bool?

        @ImmutableLeaf public var lastTwoMinutes: Bool?

        @ImmutableLeaf public var open: Bool?

        @Leaf public var appliedTo: Bool?

        public func discard() { connection.set(key: statePath.adding("Discard"), value: .bool(true), kind: .set) }
        public init(parent: Team, _ key: UUID) {
            self.parent = parent
            statePath = parent.adding(.id("ScoreAdjustment", id: key))
    
            _readonly = parent.leaf("Readonly").immutable
            _amount = parent.leaf("Amount").immutable
            _jamRecorded = parent.leaf("JamRecorded").immutable
            _periodNumberRecorded = parent.leaf("PeriodNumberRecorded").immutable
            _jamNumberRecorded = parent.leaf("JamNumberRecorded").immutable
            _recordedDuringJam = parent.leaf("RecordedDuringJam").immutable
            _lastTwoMinutes = parent.leaf("LastTwoMinutes").immutable
            _open = parent.leaf("Open").immutable
            _appliedTo = parent.leaf("AppliedTo")
            _readonly.parentPath = statePath
            _amount.parentPath = statePath
            _jamRecorded.parentPath = statePath
            _periodNumberRecorded.parentPath = statePath
            _jamNumberRecorded.parentPath = statePath
            _recordedDuringJam.parentPath = statePath
            _lastTwoMinutes.parentPath = statePath
            _open.parentPath = statePath
            _appliedTo.parentPath = statePath
        }
        public init(parent: Team, statePath: StatePath) {
            self.parent = parent
            self.statePath = statePath
            _readonly = parent.leaf("Readonly").immutable
            _amount = parent.leaf("Amount").immutable
            _jamRecorded = parent.leaf("JamRecorded").immutable
            _periodNumberRecorded = parent.leaf("PeriodNumberRecorded").immutable
            _jamNumberRecorded = parent.leaf("JamNumberRecorded").immutable
            _recordedDuringJam = parent.leaf("RecordedDuringJam").immutable
            _lastTwoMinutes = parent.leaf("LastTwoMinutes").immutable
            _open = parent.leaf("Open").immutable
            _appliedTo = parent.leaf("AppliedTo")
            _readonly.parentPath = statePath
            _amount.parentPath = statePath
            _jamRecorded.parentPath = statePath
            _periodNumberRecorded.parentPath = statePath
            _jamNumberRecorded.parentPath = statePath
            _recordedDuringJam.parentPath = statePath
            _lastTwoMinutes.parentPath = statePath
            _open.parentPath = statePath
            _appliedTo.parentPath = statePath
        }
    }
    public func scoreAdjustment(_ key: UUID) -> ScoreAdjustment { .init(parent: self, key) }
    public var activeScoreAdjustment: ScoreAdjustment { ScoreAdjustment(parent: self, statePath: self.adding("ActiveScoreAdjustment"))}

    @Leaf public var activeScoreAdjustmentAmount: Int?

    // path to file

    @Leaf public var logo: String?

    

    // these are lowercase

    public enum AlternateName: String, EnumStringAsID {
        case `operator` = "operator"
        case scoreboard = "scoreboard"
        case whiteboard = "whiteboard"
        case overlay = "overlay"
    }
    public struct AlternateName_Subscript {
        var connection: Connection
        var statePath: StatePath
        public subscript(alternateName:AlternateName) -> String? {
            let l = Leaf<String>(connection: connection, component: .name("AlternateName", name: alternateName.rawValue), parentPath: statePath)
            return l.wrappedValue
        }
    }
    public var alternateName:AlternateName_Subscript { .init(connection: connection, statePath: statePath) }
    

    //    flag Timeout

    //    flag OfficialReview

    

    public var skaters : MapNodeCollection<Self, Skater, UUID> { .init(self,"Skater") } 

    

    public func addTrip() { connection.set(key: statePath.adding("AddTrip"), value: .bool(true), kind: .set) }
    public func removeTrip() { connection.set(key: statePath.adding("RemoveTrip"), value: .bool(true), kind: .set) }
    public func advanceFieldings() { connection.set(key: statePath.adding("AdvanceFieldings"), value: .bool(true), kind: .set) }
    public func timeout() { connection.set(key: statePath.adding("Timeout"), value: .bool(true), kind: .set) }
    public func officialReview() { connection.set(key: statePath.adding("OfficialReview"), value: .bool(true), kind: .set) }
    

    public struct Expulsion : PathNodeId, Identifiable {
        public var parent: Team
        public var id: StatePath { statePath }
        public let statePath: StatePath
        @ImmutableLeaf public var readonly: Bool?

        @Leaf public var info: String?

        @Leaf public var extraInfo: String?

        @Leaf public var suspension: Bool?

        public init(parent: Team, _ key: UUID) {
            self.parent = parent
            statePath = parent.adding(.id("Expulsion", id: key))
    
            _readonly = parent.leaf("Readonly").immutable
            _info = parent.leaf("Info")
            _extraInfo = parent.leaf("ExtraInfo")
            _suspension = parent.leaf("Suspension")
            _readonly.parentPath = statePath
            _info.parentPath = statePath
            _extraInfo.parentPath = statePath
            _suspension.parentPath = statePath
        }
        public init(parent: Team, statePath: StatePath) {
            self.parent = parent
            self.statePath = statePath
            _readonly = parent.leaf("Readonly").immutable
            _info = parent.leaf("Info")
            _extraInfo = parent.leaf("ExtraInfo")
            _suspension = parent.leaf("Suspension")
            _readonly.parentPath = statePath
            _info.parentPath = statePath
            _extraInfo.parentPath = statePath
            _suspension.parentPath = statePath
        }
    }
    public func expulsion(_ key: UUID) -> Expulsion { .init(parent: self, key) }
    public init(parent: Game, _ key: Int) {
        self.parent = parent
        statePath = parent.adding(.number("Team", param: key))

        _team = parent.leaf("Team")
        _teamId = parent.leaf("teamId").immutable
        _name = parent.leaf("Name").immutable
        _fullName = parent.leaf("FullName")
        _initials = parent.leaf("Initials").immutable
        _fileName = parent.leaf("FileName").immutable
        _leagueName = parent.leaf("LeagueName")
        _uniformColor = parent.leaf("UniformColor")
        _score = parent.leaf("Score").immutable
        _timeouts = parent.leaf("Timeouts").immutable
        _officialReviews = parent.leaf("OfficialReviews").immutable
        _inTimeout = parent.leaf("InTimeout").immutable
        _inOfficialReview = parent.leaf("InOfficialReview").immutable
        _totalPenalites = parent.leaf("TotalPenalites").immutable
        _retainedOfficialReview = parent.leaf("RetainedOfficialReview")
        _displayLead = parent.leaf("DisplayLead").immutable
        _jamScore = parent.leaf("JamScore").immutable
        _tripScore = parent.leaf("TripScore")
        _lastScore = parent.leaf("LastScore").immutable
        _lost = parent.leaf("Lost")
        _lead = parent.leaf("Lead")
        _calloff = parent.leaf("Calloff")
        _injury = parent.leaf("Injury")
        _noInitial = parent.leaf("NoInitial")
        _starPass = parent.leaf("StarPass")
        _noPivot = parent.leaf("NoPivot")
        _starPassTrip = parent.leaf("StarPassTrip").immutable
        _activeScoreAdjustmentAmount = parent.leaf("ActiveScoreAdjustmentAmount")
        _logo = parent.leaf("Logo")
        _team.parentPath = statePath
        _teamId.parentPath = statePath
        _name.parentPath = statePath
        _fullName.parentPath = statePath
        _initials.parentPath = statePath
        _fileName.parentPath = statePath
        _leagueName.parentPath = statePath
        _uniformColor.parentPath = statePath
        _score.parentPath = statePath
        _timeouts.parentPath = statePath
        _officialReviews.parentPath = statePath
        _inTimeout.parentPath = statePath
        _inOfficialReview.parentPath = statePath
        _totalPenalites.parentPath = statePath
        _retainedOfficialReview.parentPath = statePath
        _displayLead.parentPath = statePath
        _jamScore.parentPath = statePath
        _tripScore.parentPath = statePath
        _lastScore.parentPath = statePath
        _lost.parentPath = statePath
        _lead.parentPath = statePath
        _calloff.parentPath = statePath
        _injury.parentPath = statePath
        _noInitial.parentPath = statePath
        _starPass.parentPath = statePath
        _noPivot.parentPath = statePath
        _starPassTrip.parentPath = statePath
        _activeScoreAdjustmentAmount.parentPath = statePath
        _logo.parentPath = statePath
    }
    public init(parent: Game, _ key: UUID) {
        self.parent = parent
        statePath = parent.adding(.id("Team", id: key))

        _team = parent.leaf("Team")
        _teamId = parent.leaf("teamId").immutable
        _name = parent.leaf("Name").immutable
        _fullName = parent.leaf("FullName")
        _initials = parent.leaf("Initials").immutable
        _fileName = parent.leaf("FileName").immutable
        _leagueName = parent.leaf("LeagueName")
        _uniformColor = parent.leaf("UniformColor")
        _score = parent.leaf("Score").immutable
        _timeouts = parent.leaf("Timeouts").immutable
        _officialReviews = parent.leaf("OfficialReviews").immutable
        _inTimeout = parent.leaf("InTimeout").immutable
        _inOfficialReview = parent.leaf("InOfficialReview").immutable
        _totalPenalites = parent.leaf("TotalPenalites").immutable
        _retainedOfficialReview = parent.leaf("RetainedOfficialReview")
        _displayLead = parent.leaf("DisplayLead").immutable
        _jamScore = parent.leaf("JamScore").immutable
        _tripScore = parent.leaf("TripScore")
        _lastScore = parent.leaf("LastScore").immutable
        _lost = parent.leaf("Lost")
        _lead = parent.leaf("Lead")
        _calloff = parent.leaf("Calloff")
        _injury = parent.leaf("Injury")
        _noInitial = parent.leaf("NoInitial")
        _starPass = parent.leaf("StarPass")
        _noPivot = parent.leaf("NoPivot")
        _starPassTrip = parent.leaf("StarPassTrip").immutable
        _activeScoreAdjustmentAmount = parent.leaf("ActiveScoreAdjustmentAmount")
        _logo = parent.leaf("Logo")
        _team.parentPath = statePath
        _teamId.parentPath = statePath
        _name.parentPath = statePath
        _fullName.parentPath = statePath
        _initials.parentPath = statePath
        _fileName.parentPath = statePath
        _leagueName.parentPath = statePath
        _uniformColor.parentPath = statePath
        _score.parentPath = statePath
        _timeouts.parentPath = statePath
        _officialReviews.parentPath = statePath
        _inTimeout.parentPath = statePath
        _inOfficialReview.parentPath = statePath
        _totalPenalites.parentPath = statePath
        _retainedOfficialReview.parentPath = statePath
        _displayLead.parentPath = statePath
        _jamScore.parentPath = statePath
        _tripScore.parentPath = statePath
        _lastScore.parentPath = statePath
        _lost.parentPath = statePath
        _lead.parentPath = statePath
        _calloff.parentPath = statePath
        _injury.parentPath = statePath
        _noInitial.parentPath = statePath
        _starPass.parentPath = statePath
        _noPivot.parentPath = statePath
        _starPassTrip.parentPath = statePath
        _activeScoreAdjustmentAmount.parentPath = statePath
        _logo.parentPath = statePath
    }
    public init(parent: Game, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _team = parent.leaf("Team")
        _teamId = parent.leaf("teamId").immutable
        _name = parent.leaf("Name").immutable
        _fullName = parent.leaf("FullName")
        _initials = parent.leaf("Initials").immutable
        _fileName = parent.leaf("FileName").immutable
        _leagueName = parent.leaf("LeagueName")
        _uniformColor = parent.leaf("UniformColor")
        _score = parent.leaf("Score").immutable
        _timeouts = parent.leaf("Timeouts").immutable
        _officialReviews = parent.leaf("OfficialReviews").immutable
        _inTimeout = parent.leaf("InTimeout").immutable
        _inOfficialReview = parent.leaf("InOfficialReview").immutable
        _totalPenalites = parent.leaf("TotalPenalites").immutable
        _retainedOfficialReview = parent.leaf("RetainedOfficialReview")
        _displayLead = parent.leaf("DisplayLead").immutable
        _jamScore = parent.leaf("JamScore").immutable
        _tripScore = parent.leaf("TripScore")
        _lastScore = parent.leaf("LastScore").immutable
        _lost = parent.leaf("Lost")
        _lead = parent.leaf("Lead")
        _calloff = parent.leaf("Calloff")
        _injury = parent.leaf("Injury")
        _noInitial = parent.leaf("NoInitial")
        _starPass = parent.leaf("StarPass")
        _noPivot = parent.leaf("NoPivot")
        _starPassTrip = parent.leaf("StarPassTrip").immutable
        _activeScoreAdjustmentAmount = parent.leaf("ActiveScoreAdjustmentAmount")
        _logo = parent.leaf("Logo")
        _team.parentPath = statePath
        _teamId.parentPath = statePath
        _name.parentPath = statePath
        _fullName.parentPath = statePath
        _initials.parentPath = statePath
        _fileName.parentPath = statePath
        _leagueName.parentPath = statePath
        _uniformColor.parentPath = statePath
        _score.parentPath = statePath
        _timeouts.parentPath = statePath
        _officialReviews.parentPath = statePath
        _inTimeout.parentPath = statePath
        _inOfficialReview.parentPath = statePath
        _totalPenalites.parentPath = statePath
        _retainedOfficialReview.parentPath = statePath
        _displayLead.parentPath = statePath
        _jamScore.parentPath = statePath
        _tripScore.parentPath = statePath
        _lastScore.parentPath = statePath
        _lost.parentPath = statePath
        _lead.parentPath = statePath
        _calloff.parentPath = statePath
        _injury.parentPath = statePath
        _noInitial.parentPath = statePath
        _starPass.parentPath = statePath
        _noPivot.parentPath = statePath
        _starPassTrip.parentPath = statePath
        _activeScoreAdjustmentAmount.parentPath = statePath
        _logo.parentPath = statePath
    }
}
extension Game {
    public func team(_ key: Int) -> Team { .init(parent: self, key) }
}
extension Game {
    public func team(_ key: UUID) -> Team { .init(parent: self, key) }
}
