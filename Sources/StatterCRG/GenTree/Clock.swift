// Clock.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Clock : PathNodeId, Identifiable {
    public var parent: Game
    public var id: Kind? { Kind.from(component: statePath.last)?.1 }
    public let statePath: StatePath
    public enum Kind: String, EnumStringAsID {
        case timeOut = "Timeout"
        case period = "Period"
        case lineup = "Lineup"
        case jam = "Jam"
        case intermission = "Intermission"
    }
    @Leaf public var time: Int?

    @Leaf public var invertedTime: Int?

    @Leaf public var maximumTime: Int?

    @Leaf public var readonly: Bool?

    @Leaf public var running: Bool?

    @Leaf public var name: String?

    @Leaf public var direction: Bool?

    @Leaf public var number: Int?

    public init(parent: Game, kind: Kind) {
        self.parent = parent
        statePath = parent.adding(.name("Clock", name: kind.rawValue))

        _time = parent.leaf("Time")
        _invertedTime = parent.leaf("InvertedTime")
        _maximumTime = parent.leaf("MaximumTime")
        _readonly = parent.leaf("Readonly")
        _running = parent.leaf("Running")
        _name = parent.leaf("Name")
        _direction = parent.leaf("Direction")
        _number = parent.leaf("Number")
        _time.parentPath = statePath
        _invertedTime.parentPath = statePath
        _maximumTime.parentPath = statePath
        _readonly.parentPath = statePath
        _running.parentPath = statePath
        _name.parentPath = statePath
        _direction.parentPath = statePath
        _number.parentPath = statePath
    }
    public init(parent: Game, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _time = parent.leaf("Time")
        _invertedTime = parent.leaf("InvertedTime")
        _maximumTime = parent.leaf("MaximumTime")
        _readonly = parent.leaf("Readonly")
        _running = parent.leaf("Running")
        _name = parent.leaf("Name")
        _direction = parent.leaf("Direction")
        _number = parent.leaf("Number")
        _time.parentPath = statePath
        _invertedTime.parentPath = statePath
        _maximumTime.parentPath = statePath
        _readonly.parentPath = statePath
        _running.parentPath = statePath
        _name.parentPath = statePath
        _direction.parentPath = statePath
        _number.parentPath = statePath
    }
}
extension Game {
    public func clock(_ kind: Clock.Kind) -> Clock { .init(parent: self, kind: kind) }
}
