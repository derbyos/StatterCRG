// Clock.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Clock : PathNodeId, Identifiable {
    public var parent: Game
    public var id: StatePath { statePath }
    public let statePath: StatePath
    public enum Kind: String, EnumStringAsID {
        case timeOut = "Timeout"
        case period = "Period"
        case lineup = "Lineup"
        case jam = "Jam"
        case intermission = "Intermission"
    }
    @ImmutableLeaf public var clockId: String?

    @Leaf public var time: Duration?

    @ImmutableLeaf public var invertedTime: Duration?

    @Leaf public var maximumTime: Duration?

    @Leaf public var minimumTime: Duration?

    @ImmutableLeaf public var readonly: Bool?

    @Leaf public var running: Bool?

    @Leaf public var name: String?

    @Leaf public var direction: Bool?

    @Leaf public var number: Int?

    public func start() { connection.set(key: statePath.adding("Start"), value: .bool(true), kind: .set) }
    public func stop() { connection.set(key: statePath.adding("Stop"), value: .bool(true), kind: .set) }
    public func resetTime() { connection.set(key: statePath.adding("ResetTime"), value: .bool(true), kind: .reset) }
    public init(parent: Game, _ key: Kind) {
        self.parent = parent
        statePath = parent.adding(.name("Clock", name: key.rawValue))

        _clockId = parent.leaf("Id").immutable
        _time = parent.leaf("Time")
        _invertedTime = parent.leaf("InvertedTime").immutable
        _maximumTime = parent.leaf("MaximumTime")
        _minimumTime = parent.leaf("MinimumTime")
        _readonly = parent.leaf("Readonly").immutable
        _running = parent.leaf("Running")
        _name = parent.leaf("Name")
        _direction = parent.leaf("Direction")
        _number = parent.leaf("Number")
        _clockId.parentPath = statePath
        _time.parentPath = statePath
        _invertedTime.parentPath = statePath
        _maximumTime.parentPath = statePath
        _minimumTime.parentPath = statePath
        _readonly.parentPath = statePath
        _running.parentPath = statePath
        _name.parentPath = statePath
        _direction.parentPath = statePath
        _number.parentPath = statePath
    }
    public init(parent: Game, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _clockId = parent.leaf("Id").immutable
        _time = parent.leaf("Time")
        _invertedTime = parent.leaf("InvertedTime").immutable
        _maximumTime = parent.leaf("MaximumTime")
        _minimumTime = parent.leaf("MinimumTime")
        _readonly = parent.leaf("Readonly").immutable
        _running = parent.leaf("Running")
        _name = parent.leaf("Name")
        _direction = parent.leaf("Direction")
        _number = parent.leaf("Number")
        _clockId.parentPath = statePath
        _time.parentPath = statePath
        _invertedTime.parentPath = statePath
        _maximumTime.parentPath = statePath
        _minimumTime.parentPath = statePath
        _readonly.parentPath = statePath
        _running.parentPath = statePath
        _name.parentPath = statePath
        _direction.parentPath = statePath
        _number.parentPath = statePath
    }
}
extension Game {
    public func clock(_ key: Clock.Kind) -> Clock { .init(parent: self, key) }
}
