// Game.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Game : PathNodeId, Identifiable {
    public var parent: ScoreBoard
    public var id: UUID? { UUID.from(component: statePath.last)?.1 }
    public let statePath: StatePath
    

    @Leaf public var game: UUID?

    public var teamOne: Team { team(1) }
    public var teamTwo: Team { team(2) }
    public var periodClock: Clock { clock(.period) }
    public var jamClock: Clock { clock(.jam) }
    public var lineupClock: Clock { clock(.lineup) }
    public var timeOutClock: Clock { clock(.timeOut) }
    public var intermissionClock: Clock { clock(.intermission) }
    @Leaf public var currentPeriodNumber: Int?

    @Leaf public var officialScore: Bool?

    @Leaf public var rulesetName: String?

    @Leaf public var inJam: Bool?

    @Leaf public var officialReview: Bool?

    

    @Leaf public var timeoutOwner: String?

    // These are commands, not state

    public func startJam() { connection.set(key: statePath.adding("StartJam"), value: .bool(true), kind: .set) }
    public func stopJam() { connection.set(key: statePath.adding("StopJam"), value: .bool(true), kind: .set) }
    public func timeout() { connection.set(key: statePath.adding("Timeout"), value: .bool(true), kind: .set) }
    public func officialTimeout() { connection.set(key: statePath.adding("OfficialTimeout"), value: .bool(true), kind: .set) }
    

    public typealias PenaltyCode_Map = MapValueCollection<String, String>
    public var penaltyCode:PenaltyCode_Map { .init(connection: connection, statePath: self.adding(.wild("PenaltyCode"))) }

    public init(parent: ScoreBoard, id: UUID) {
        self.parent = parent
        statePath = parent.adding(.id("Game", id: id))

        _game = parent.leaf("Game")
        _currentPeriodNumber = parent.leaf("CurrentPeriodNumber")
        _officialScore = parent.leaf("OfficialScore")
        _rulesetName = parent.leaf("RulesetName")
        _inJam = parent.leaf("InJam")
        _officialReview = parent.leaf("OfficialReview")
        _timeoutOwner = parent.leaf("TimeoutOwner")
        _game.parentPath = statePath
        _currentPeriodNumber.parentPath = statePath
        _officialScore.parentPath = statePath
        _rulesetName.parentPath = statePath
        _inJam.parentPath = statePath
        _officialReview.parentPath = statePath
        _timeoutOwner.parentPath = statePath
    }
    public init(parent: ScoreBoard, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _game = parent.leaf("Game")
        _currentPeriodNumber = parent.leaf("CurrentPeriodNumber")
        _officialScore = parent.leaf("OfficialScore")
        _rulesetName = parent.leaf("RulesetName")
        _inJam = parent.leaf("InJam")
        _officialReview = parent.leaf("OfficialReview")
        _timeoutOwner = parent.leaf("TimeoutOwner")
        _game.parentPath = statePath
        _currentPeriodNumber.parentPath = statePath
        _officialScore.parentPath = statePath
        _rulesetName.parentPath = statePath
        _inJam.parentPath = statePath
        _officialReview.parentPath = statePath
        _timeoutOwner.parentPath = statePath
    }
}
extension ScoreBoard {
    public func game(_ id: UUID) -> Game { .init(parent: self, id: id) }
}
