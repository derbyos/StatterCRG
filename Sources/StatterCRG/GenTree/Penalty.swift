// Penalty.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Penalty : PathNodeId, Identifiable {
    public var parent: Skater
    public var id: StatePath { statePath }
    public let statePath: StatePath
    @ImmutableLeaf public var penaltyId: UUID?

    @Leaf public var number: Int?

    @Leaf public var jamNumber: Int?

    @Leaf public var periodNumber: Int?

    @Leaf public var serving: Bool?

    @Leaf public var served: Bool?

    @Leaf public var code: String?

    @Leaf public var next: String?

    // this is normally a UUID if it is available

    @Leaf public var boxTrip: String?

    public init(parent: Skater, _ key: Int) {
        self.parent = parent
        statePath = parent.adding(.number("Penalty", param: key))

        _penaltyId = parent.leaf("Id").immutable
        _number = parent.leaf("Number")
        _jamNumber = parent.leaf("JamNumber")
        _periodNumber = parent.leaf("PeriodNumber")
        _serving = parent.leaf("Serving")
        _served = parent.leaf("Served")
        _code = parent.leaf("Code")
        _next = parent.leaf("Next")
        _boxTrip = parent.leaf("BoxTrip")
        _penaltyId.parentPath = statePath
        _number.parentPath = statePath
        _jamNumber.parentPath = statePath
        _periodNumber.parentPath = statePath
        _serving.parentPath = statePath
        _served.parentPath = statePath
        _code.parentPath = statePath
        _next.parentPath = statePath
        _boxTrip.parentPath = statePath
    }
    public init(parent: Skater, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _penaltyId = parent.leaf("Id").immutable
        _number = parent.leaf("Number")
        _jamNumber = parent.leaf("JamNumber")
        _periodNumber = parent.leaf("PeriodNumber")
        _serving = parent.leaf("Serving")
        _served = parent.leaf("Served")
        _code = parent.leaf("Code")
        _next = parent.leaf("Next")
        _boxTrip = parent.leaf("BoxTrip")
        _penaltyId.parentPath = statePath
        _number.parentPath = statePath
        _jamNumber.parentPath = statePath
        _periodNumber.parentPath = statePath
        _serving.parentPath = statePath
        _served.parentPath = statePath
        _code.parentPath = statePath
        _next.parentPath = statePath
        _boxTrip.parentPath = statePath
    }
}
extension Skater {
    public func penalty(_ key: Int) -> Penalty { .init(parent: self, key) }
}
