// Fielding.swift
// Statter
//
// This file auto-generated by treemaker, do not edit
//

import Foundation
public struct Fielding<P:PathSpecified> : PathNodeId, Identifiable {
    public var parent: P
    public var id: StatePath { statePath }
    public let statePath: StatePath
    @Leaf public var annotation: String?

    @Leaf public var boxTripSymbols: String?

    @Leaf public var boxTripSymbolsAfterSP: String?

    @Leaf public var boxTripSymbolsBeforeSP: String?

    @Leaf public var currentBoxTrip: String?

    // Id is uuid + team + position

    // var Id : String

    @Leaf public var next: String?

    @Leaf public var notFielded: Bool?

    // why is this an int?

    @Leaf public var number: Int?

    @Leaf public var penaltyBox: Bool?

    @Leaf public var position: String?

    @Leaf public var previous: String?

    @ImmutableLeaf public var readonly: Bool?

    @Leaf public var sitFor3: Bool?

    @Leaf public var skater: UUID?

    public init(parent: P) {
        self.parent = parent
        statePath = parent.adding("Fielding")

        _annotation = parent.leaf("Annotation")
        _boxTripSymbols = parent.leaf("BoxTripSymbols")
        _boxTripSymbolsAfterSP = parent.leaf("BoxTripSymbolsAfterSP")
        _boxTripSymbolsBeforeSP = parent.leaf("BoxTripSymbolsBeforeSP")
        _currentBoxTrip = parent.leaf("CurrentBoxTrip")
        _next = parent.leaf("Next")
        _notFielded = parent.leaf("NotFielded")
        _number = parent.leaf("Number")
        _penaltyBox = parent.leaf("PenaltyBox")
        _position = parent.leaf("Position")
        _previous = parent.leaf("Previous")
        _readonly = parent.leaf("Readonly").immutable
        _sitFor3 = parent.leaf("SitFor3")
        _skater = parent.leaf("Skater")
        _annotation.parentPath = statePath
        _boxTripSymbols.parentPath = statePath
        _boxTripSymbolsAfterSP.parentPath = statePath
        _boxTripSymbolsBeforeSP.parentPath = statePath
        _currentBoxTrip.parentPath = statePath
        _next.parentPath = statePath
        _notFielded.parentPath = statePath
        _number.parentPath = statePath
        _penaltyBox.parentPath = statePath
        _position.parentPath = statePath
        _previous.parentPath = statePath
        _readonly.parentPath = statePath
        _sitFor3.parentPath = statePath
        _skater.parentPath = statePath
    }
    public init(parent: P, statePath: StatePath) {
        self.parent = parent
        self.statePath = statePath
        _annotation = parent.leaf("Annotation")
        _boxTripSymbols = parent.leaf("BoxTripSymbols")
        _boxTripSymbolsAfterSP = parent.leaf("BoxTripSymbolsAfterSP")
        _boxTripSymbolsBeforeSP = parent.leaf("BoxTripSymbolsBeforeSP")
        _currentBoxTrip = parent.leaf("CurrentBoxTrip")
        _next = parent.leaf("Next")
        _notFielded = parent.leaf("NotFielded")
        _number = parent.leaf("Number")
        _penaltyBox = parent.leaf("PenaltyBox")
        _position = parent.leaf("Position")
        _previous = parent.leaf("Previous")
        _readonly = parent.leaf("Readonly").immutable
        _sitFor3 = parent.leaf("SitFor3")
        _skater = parent.leaf("Skater")
        _annotation.parentPath = statePath
        _boxTripSymbols.parentPath = statePath
        _boxTripSymbolsAfterSP.parentPath = statePath
        _boxTripSymbolsBeforeSP.parentPath = statePath
        _currentBoxTrip.parentPath = statePath
        _next.parentPath = statePath
        _notFielded.parentPath = statePath
        _number.parentPath = statePath
        _penaltyBox.parentPath = statePath
        _position.parentPath = statePath
        _previous.parentPath = statePath
        _readonly.parentPath = statePath
        _sitFor3.parentPath = statePath
        _skater.parentPath = statePath
    }
}
extension Jam {
    public var fielding: Fielding<Jam> { .init(parent: self) }
}
extension TeamJam {
    public var fielding: Fielding<TeamJam> { .init(parent: self) }
}
